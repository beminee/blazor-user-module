@page "/account/login"
@using LoginRegister.Enums
@inject IAccountService AccountService
@inject IAlertService AlertService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<style>
    body {
        background-color: #343A40;
    }
</style>

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="model.Username" class="form-control" />
                <ValidationMessage For="@(() => model.Username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="account/register" class="btn btn-link">Register</NavLink>
            <button disabled="@loading" class="btn btn-link" @onclick="CreateDefaultAccounts">Create Default Accounts</button>
        </EditForm>
    </div>
</div>

@code {
    private Models.Account.Login model = new Models.Account.Login();
    private bool loading;

    private async void CreateDefaultAccounts()
    {
        // reset alerts on run
        AlertService.Clear();

        loading = true;
        try
        {
            // Model setup
            var admin = new AddUser()
            {
                FirstName = "Admin",
                LastName = "Account",
                Password = "admin123",
                Rank = UserRanks.Admin,
                Username = "admin"
            };
            var user = new AddUser()
            {
                FirstName = "User",
                LastName = "Account",
                Password = "user123",
                Rank = UserRanks.User,
                Username = "user"
            };
            var banned = new AddUser()
            {
                FirstName = "Banned",
                LastName = "Account",
                Password = "banned123",
                Rank = UserRanks.Banned,
                Username = "banned"
            };

            // Get all users
            var users = await LocalStorage.GetItem<List<UserRecord>>("big-long-key-registration-testing") ?? new List<UserRecord>();

            // Check if account with same name already exist to avoid exceptions.
            if (users.All(x => x.Username != "admin"))
            {
                await AccountService.Register(admin);
            }

            if (users.All(x => x.Username != "user"))
            {
                await AccountService.Register(user);
            }
            if (users.All(x => x.Username != "banned"))
            {
                await AccountService.Register(banned);
            }
            loading = false;

            AlertService.Success("Default accounts are created. admin/user/banned : admin123/user123/banned123", keepAfterRouteChange: false);
            StateHasChanged();
    //NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
            await AccountService.Login(model);
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}